# -*- coding: utf-8 -*-
"""Spotlight-Bot - Automated Cloud Resource Usage Visualizer

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1y1sEyvWd3UiDWmKNrdVAn4E3hqiXSSDK
"""

# ============================================================
# Spotlight-Bot — Automated Cloud Resource Usage Visualizer
# ============================================================

import os
import json
import random
import matplotlib.pyplot as plt
from datetime import datetime, timedelta

# Configuration
USAGE_DATA = "data/usage_data.json"
REPORT_IMAGE = "data/usage_visualization.png"
DAYS = 7
RESOURCES = ["compute", "storage", "database", "networking"]

os.makedirs(os.path.dirname(USAGE_DATA), exist_ok=True)

# Generate dummy usage data if not exists
if not os.path.exists(USAGE_DATA):
    usage = []
    now = datetime.utcnow()
    for d in range(DAYS):
        date = (now - timedelta(days=d)).strftime("%Y-%m-%d")
        for r in RESOURCES:
            usage.append({
                "date": date,
                "resource_type": r,
                "usage_hours": round(random.uniform(1, 24), 2),
                "cost_usd": round(random.uniform(5, 100), 2)
            })
    with open(USAGE_DATA, "w", encoding="utf-8") as f:
        json.dump(usage, f, indent=2)

# Load usage data
with open(USAGE_DATA, "r", encoding="utf-8") as f:
    data = json.load(f)

# Transform into plots
dates = sorted(list({d["date"] for d in data}))
fig, axs = plt.subplots(len(RESOURCES), 1, figsize=(10, 5 * len(RESOURCES)))

for i, r in enumerate(RESOURCES):
    subset = [d for d in data if d["resource_type"] == r]
    subset_sorted = sorted(subset, key=lambda x: x["date"])
    hours = [x["usage_hours"] for x in subset_sorted]
    costs = [x["cost_usd"] for x in subset_sorted]
    axs[i].plot(dates, hours, label=f"{r} (hours)", marker='o')
    axs[i].plot(dates, costs, label=f"{r} (cost USD)", marker='x')
    axs[i].set_title(f"Usage & Cost for {r}")
    axs[i].legend()
    axs[i].set_xlabel("Date")
    axs[i].set_ylabel("Value")
    axs[i].grid(True)

plt.tight_layout()
plt.savefig(REPORT_IMAGE)
plt.show()

print("✅ Visualization saved to", REPORT_IMAGE)